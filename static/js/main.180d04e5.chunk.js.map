{"version":3,"sources":["atoms.ts","components/CreateTodo.tsx","components/CreateCategory.tsx","components/Todo.tsx","components/TodoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["CATEGORIES_LOCAL_STORAGE_KEY","localStorageCategoriesData","localStorage","getItem","initalCategoriesState","JSON","parse","_categoriesState","atom","key","default","categoriesState","selector","get","set","newValue","setItem","stringify","TODOS_LOCAL_STORAGE_KEY","localStorageTodosData","initalTodosState","_todosState","todosState","FILTER_ALL","todoFilterState","filteredTodoState","todos","filter","todo","category","Form","styled","form","Input","input","CreateTodo","setTodos","useSetRecoilState","categories","useRecoilValue","defaultCategory","selectedCategory","useForm","register","handleSubmit","setValue","onSubmit","id","Date","now","text","required","placeholder","NewCategoryForm","CreateCategory","mode","reset","setError","errors","formState","onValid","a","newCategoryName","message","pattern","value","Item","li","prop","theme","secondBgColor","Text","span","Button","button","Category","div","Todo","useRecoilState","setCategories","setFilter","useState","isCreatingCategory","setIsCreatingCategory","index","findIndex","NEW_CATEGORY_KEY","_changeCategory","changedTodo","slice","handleClickDelete","handleCreateCategory","includes","Error","className","name","onChange","target","defaultValue","map","onClick","Container","List","ul","FilterContainer","Filter","select","EmptyPage","TodoList","length","categoryIndex","indexOf","GlobalStyle","createGlobalStyle","props","bgColor","darkTextColor","App","ReactDOM","render","StrictMode","secondAccentColor","primaryColor","whiteColor","accentColor","document","getElementById"],"mappings":"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","file":"static/js/main.180d04e5.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\n\nexport type CATEGORY = string;\n\nconst CATEGORIES_LOCAL_STORAGE_KEY = 'categories';\nconst localStorageCategoriesData = localStorage.getItem(CATEGORIES_LOCAL_STORAGE_KEY);\nconst initalCategoriesState = localStorageCategoriesData\n  ? JSON.parse(localStorageCategoriesData)\n  : ['Todo', 'Doing', 'Done'];\n\nconst _categoriesState = atom<CATEGORY[]>({\n  key: 'categories',\n  default: initalCategoriesState,\n});\n\nexport const categoriesState = selector<CATEGORY[]>({\n  key: 'persistentCategories',\n  get: ({ get }) => {\n    return get(_categoriesState);\n  },\n  set: ({ set }, newValue) => {\n    set(_categoriesState, newValue);\n    localStorage.setItem(CATEGORIES_LOCAL_STORAGE_KEY, JSON.stringify(newValue));\n  },\n});\n\nexport interface ITodo {\n  text: string;\n  id: number;\n  category: CATEGORY;\n}\n\nconst TODOS_LOCAL_STORAGE_KEY = 'todo';\nconst localStorageTodosData = localStorage.getItem(TODOS_LOCAL_STORAGE_KEY);\nconst initalTodosState = localStorageTodosData ? JSON.parse(localStorageTodosData) : [];\n\nconst _todosState = atom<ITodo[]>({\n  key: 'todos',\n  default: initalTodosState,\n});\n\nexport const todosState = selector<ITodo[]>({\n  key: 'persistentTodos',\n  get: ({ get }) => {\n    return get(_todosState);\n  },\n  set: ({ set }, newValue) => {\n    set(_todosState, newValue);\n    localStorage.setItem(TODOS_LOCAL_STORAGE_KEY, JSON.stringify(newValue));\n  },\n});\n\nexport const FILTER_ALL = '_ALL';\nexport type FILTER = '_ALL' | CATEGORY;\n\nexport const todoFilterState = atom<FILTER>({\n  key: 'todoFilter',\n  default: FILTER_ALL,\n});\n\nexport const filteredTodoState = selector({\n  key: 'todoFiltered',\n  get: ({ get }) => {\n    const todos = get(_todosState);\n    const filter = get(todoFilterState);\n\n    if (filter === FILTER_ALL) {\n      return todos;\n    } else {\n      return todos.filter((todo) => todo.category === filter);\n    }\n  },\n});\n","import { useForm } from 'react-hook-form';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { todoFilterState, todosState, CATEGORY, categoriesState, FILTER_ALL } from '../atoms';\n\nconst Form = styled.form`\n  display: flex;\n`;\nconst Input = styled.input`\n  flex-grow: 1;\n`;\ninterface IForm {\n  todo: string;\n}\nconst CreateTodo = () => {\n  const setTodos = useSetRecoilState(todosState);\n  const categories = useRecoilValue(categoriesState);\n  const filter = useRecoilValue(todoFilterState);\n\n  const defaultCategory = categories[0];\n  const selectedCategory: CATEGORY = filter === FILTER_ALL ? defaultCategory : filter;\n\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const onValid = ({ todo }: IForm) => {\n    setTodos((todos) => [\n      ...todos,\n      {\n        id: Date.now(),\n        text: todo,\n        category: selectedCategory,\n      },\n    ]);\n\n    setValue('todo', '');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(onValid)}>\n      <Input {...register('todo', { required: 'Todo is empty' })} placeholder=\"Write a Todo\" />\n      <button>Add</button>\n    </Form>\n  );\n};\n\nexport default CreateTodo;\n","import { SubmitHandler, useForm } from 'react-hook-form';\nimport styled from 'styled-components';\nimport { CATEGORY } from '../atoms';\n\nconst NewCategoryForm = styled.form`\n  input {\n    width: 100%;\n    border: 0;\n  }\n`;\n\ninterface IForm {\n  newCategoryName: CATEGORY;\n}\n\ninterface CreateCategoryProps {\n  onSubmit: (newCategoryName: CATEGORY) => Promise<void>;\n}\n\nconst CreateCategory = ({ onSubmit }: CreateCategoryProps) => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    setError,\n    formState: { errors },\n  } = useForm<IForm>({\n    mode: 'onChange',\n  });\n\n  const onValid: SubmitHandler<IForm> = async ({ newCategoryName }) => {\n    try {\n      await onSubmit(newCategoryName);\n      reset();\n    } catch (error: any) {\n      setError('newCategoryName', {\n        message: error.message,\n      });\n    }\n  };\n\n  return (\n    <>\n      <NewCategoryForm onSubmit={handleSubmit(onValid)}>\n        <input\n          {...register('newCategoryName', {\n            required: 'The field is empty',\n            pattern: {\n              value: /[^_].*/,\n              message: \"Category name can't be started with _\",\n            },\n          })}\n        />\n      </NewCategoryForm>\n      {errors?.newCategoryName?.message && <span>{errors.newCategoryName.message}</span>}\n    </>\n  );\n};\n\nexport default CreateCategory;\n","import React from 'react';\nimport { useState } from 'react';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport styled from 'styled-components';\n\nimport { categoriesState, CATEGORY, ITodo, todoFilterState, todosState } from '../atoms';\nimport CreateCategory from './CreateCategory';\n\nconst Item = styled.li`\n  background-color: ${(prop) => prop.theme.secondBgColor};\n  margin: 10px 0;\n  display: flex;\n`;\nconst Text = styled.span`\n  flex-grow: 1;\n  margin-left: 6px;\n`;\n\nconst Button = styled.button`\n  border: 0;\n  border-radius: 5px;\n  background-color: transparent;\n  padding: 2px 3px;\n\n  &:hover {\n    background-color: rgba(0, 255, 0, 0.5);\n  }\n`;\nconst Category = styled.div`\n  width: 80px;\n  & > * {\n    width: 100%;\n    border: 0;\n  }\n`;\n\nconst Todo = (todo: ITodo) => {\n  const [todos, setTodos] = useRecoilState(todosState);\n  const [categories, setCategories] = useRecoilState(categoriesState);\n  const setFilter = useSetRecoilState(todoFilterState);\n\n  const [isCreatingCategory, setIsCreatingCategory] = useState(false);\n\n  const { category, text, id } = todo;\n  const index = todos.findIndex((todo) => todo.id === id);\n\n  const NEW_CATEGORY_KEY = '_new';\n\n  const _changeCategory = (category: CATEGORY) => {\n    const changedTodo: ITodo = {\n      ...todo,\n      category: category,\n    };\n\n    setTodos([...todos.slice(0, index), changedTodo, ...todos.slice(index + 1)]);\n  };\n\n  const handleChangeCategory = ({ target: { value } }: React.ChangeEvent<HTMLSelectElement>) => {\n    if (value === NEW_CATEGORY_KEY) {\n      setIsCreatingCategory(true);\n    } else {\n      _changeCategory(value as CATEGORY);\n    }\n  };\n\n  const handleClickDelete = async () => {\n    setTodos([...todos.slice(0, index), ...todos.slice(index + 1)]);\n  };\n\n  const handleCreateCategory = async (newCategoryName: CATEGORY) => {\n    if (categories.includes(newCategoryName)) {\n      throw new Error('Category already exists');\n    } else {\n      _changeCategory(newCategoryName);\n      setCategories((categories) => [...categories, newCategoryName]);\n      setFilter(newCategoryName);\n      setIsCreatingCategory(false);\n    }\n  };\n\n  return (\n    <Item className={`${category}`}>\n      <Text>{text}</Text>\n      {isCreatingCategory ? (\n        <Category>\n          <CreateCategory onSubmit={handleCreateCategory} />\n        </Category>\n      ) : (\n        <Category>\n          <select name=\"category\" onChange={handleChangeCategory} defaultValue={todo.category}>\n            {categories.map((category) => (\n              <option key={category} value={category}>\n                {category}\n              </option>\n            ))}\n            <option key={NEW_CATEGORY_KEY} value={NEW_CATEGORY_KEY}>\n              Create a new category...\n            </option>\n          </select>\n        </Category>\n      )}\n      <Button onClick={handleClickDelete}>&#128465;</Button>\n    </Item>\n  );\n};\n\nexport default Todo;\n","import { useRecoilState, useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { categoriesState, FILTER, filteredTodoState, todoFilterState, ITodo, FILTER_ALL, CATEGORY } from '../atoms';\nimport CreateTodo from './CreateTodo';\nimport Todo from './Todo';\n\nconst Container = styled.div`\n  margin: 10px auto;\n  max-width: 200px;\n  flex-flow: column;\n  align-items: center;\n`;\nconst List = styled.ul`\n  width: 100%;\n`;\nconst FilterContainer = styled.div`\n  margin: 10px 0;\n`;\nconst Filter = styled.select`\n  display: block;\n  margin: 0 auto;\n`;\nconst EmptyPage = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst TodoList = () => {\n  const todos = useRecoilValue<ITodo[]>(filteredTodoState);\n  const [categories, setCategories] = useRecoilState<CATEGORY[]>(categoriesState);\n  const [filter, setFilter] = useRecoilState<FILTER>(todoFilterState);\n  const handleChangeFilter = ({ target: { value } }: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilter(value as FILTER);\n  };\n  const handleDeleteCategory = () => {\n    const categoryIndex = categories.indexOf(filter);\n    if (categoryIndex !== -1) {\n      setFilter(FILTER_ALL);\n      setCategories([...categories.slice(0, categoryIndex), ...categories.slice(categoryIndex + 1)]);\n    }\n  };\n\n  return (\n    <Container>\n      <CreateTodo />\n      <FilterContainer>\n        <Filter value={filter} onChange={handleChangeFilter}>\n          <option value={FILTER_ALL} key={FILTER_ALL}>\n            All\n          </option>\n          {categories.map((category) => (\n            <option key={category} value={category}>\n              {category}\n            </option>\n          ))}\n        </Filter>\n      </FilterContainer>\n      <List>\n        {todos.length ? (\n          todos.map((todo) => <Todo key={todo.id} {...todo} />)\n        ) : filter === FILTER_ALL ? (\n          <EmptyPage>\n            <p>Create a new todo!</p>\n          </EmptyPage>\n        ) : (\n          <EmptyPage>\n            <button onClick={handleDeleteCategory}>Delete this category</button>\n          </EmptyPage>\n        )}\n      </List>\n    </Container>\n  );\n};\n\nexport default TodoList;\n","import { createGlobalStyle } from 'styled-components';\n\nimport './index.css';\nimport TodoList from './components/TodoList';\n\nconst GlobalStyle = createGlobalStyle`\n\nbody {\n  background-color: ${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.darkTextColor}\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <TodoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { ThemeProvider } from 'styled-components';\n\nimport App from './App';\nimport { lightTheme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={lightTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { DefaultTheme } from 'styled-components';\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: 'rgba(189, 195, 199, 0.5)',\n  secondAccentColor: 'rgba(241, 196, 15, 0.5)',\n  secondBgColor: 'white',\n  primaryColor: '#e67e22',\n  whiteColor: 'white',\n  darkTextColor: '#2c3e50',\n  accentColor: '#e74c3c',\n};\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: 'rgba(44, 62, 80,1.0)',\n  secondAccentColor: '',\n  secondBgColor: 'rgba(149, 165, 166,1.0)',\n  primaryColor: 'rgba(211, 84, 0,1.0)',\n  whiteColor: '#2c3e50',\n  darkTextColor: 'white',\n  accentColor: 'rgba(192, 57, 43,1.0)',\n};\n"],"sourceRoot":""}